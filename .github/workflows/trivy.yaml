---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Trivy Scan

on:
  workflow_dispatch:
    inputs:
      trivy-scan-tag:
        description: "The tag to scan"
        type: string
        required: false
      trivy-output-format:
        description: "Format for trivy output"
        type: string
        required: false
  registry_package:
    types: [ "published" ]

env:
  WORKFLOW_ISSUE_TITLE: "Security Dashboard ðŸ‘®"
  REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  trivy:
    runs-on: ubuntu-latest
    if: ${{ github.event.registry_package.package_version.container_metadata.tag.name != '' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # 0.24.0
        with:
          image-ref: "${{ env.REGISTRY_IMAGE }}:${{ inputs.trivy-scan-tag || 'latest' }}"
          format: 'sarif'
          output: 'trivy-results.sarif'
          # format: "${{ inputs.trivy-output-format || 'table' }}"
          # ignore-unfixed: true
          # output: trivy-results.md

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # - name: Pretty-fy output
      #   run: |
      #     echo "# Trivy Scan Results" > security-dashboard.md
      #     echo "```markdown" > security-dashboard.md
      #     cat trivy-results.md >> security-dashboard.md
      #     echo "```" >> security-dashboard.md

      # - name: Generate Token
      #   uses: actions/create-github-app-token@31c86eb3b33c9b601a1f60f98dcbfd1d70f379b4 # v1.10.3
      #   id: app-token
      #   with:
      #     app-id: "${{ secrets.BOT_APP_ID }}"
      #     private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      # - name: Find Security Dashboard Issue
      #   id: find-issue
      #   run: |
      #     issue_number=$( \
      #         gh issue list \
      #             --search "in:title ${{ env.WORKFLOW_ISSUE_TITLE }}" \
      #             --state open \
      #             --json number \
      #             | jq --raw-output '.[0].number' \
      #     )
      #     echo "issue-number=${issue_number}" >> $GITHUB_OUTPUT
      #     echo "${issue_number}"
      #   env:
      #     GH_TOKEN: "${{ steps.app-token.outputs.token }}"

      # - name: Create or Update Issue
      #   uses: peter-evans/create-issue-from-file@24452a72d85239eacf1468b0f1982a9f3fec4c94 # v5.0.0
      #   with:
      #     token: "${{ steps.app-token.outputs.token }}"
      #     title: "${{ env.WORKFLOW_ISSUE_TITLE }}"
      #     issue-number: "${{ steps.find-issue.outputs.issue-number || '' }}"
      #     content-filepath: security-dashboard.md
